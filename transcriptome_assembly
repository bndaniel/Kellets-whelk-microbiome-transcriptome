# de novo transcriptome assembly commands

# DATA
#42 kellet's whelk egg capsules had full transcriptome sequencing - resulting in ~___ Gb of data for the transcriptome assembly
________________________________________________________________________________________________________________________________________
# Raw sequence trimmming 
#Trimming was conducted on all samples except for duplicates (“ ”_2) using Trimmomatic 0.39 IlluminaClip with parameters: leading:3 trailing:3 (removal of first and last three base pairs), slidingwindow: 4:15 (scans the read with a 4-base wide sliding window, cutting when the average quality per base drops below 15), minlen:36 (drop reads with less than 36 base pair length)
# command for trimming using trimmomatic

ILLUMINACLIP:/usr/local/Trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36 :::: sample_list.txt > trimmomatic.out 2>trimmomatic.err

# see full data processing at https://github.com/calpoly-bioinf/whelk_processing_analysis
________________________________________________________________________________________________________________________________________
# RNAspades transcriptome assembly
# using bioconda to upload SPAdes genome assembler v3.15.4

conda create -n spades
conda activate spades
conda install -c bioconda spades
spades.py

#command for transcriptome assembly
spades.py --rna -1 ./kw_fastq_all_trimmed/combined_1_paired.fq.gz -2 ./kw_fastq_all_trimmed/combined_2_paired.fq.gz -t 64 -m 750 -o rnaspades_04302022

________________________________________________________________________________________________________________________________________

# Trinity transcriptome assembly
#creating left and right datasets from paired end combined sequence files from trimmomatic output

LEFT=$SRC_DATA_DIR/combined_1_paired.fq.gz
RIGHT=$SRC_DATA_DIR/combined_2_paired.fq.gz

#command for trinity assembly (note: FORCE was used to complete assembly)
docker run --rm -v `pwd`/..:`pwd`/.. trinityrnaseq/trinityrnaseq Trinity --seqType fq --left $LEFT --right $RIGHT --CPU 32 --max_memory 700G --output `pwd`/trinity_assembly_1 --FORCE > trinity_assembly.log 2>&1

________________________________________________________________________________________________________________________________________

#Trans-ABySS??? assembly






________________________________________________________________________________________________________________________________________
# BUSCO analysis of Transcriptome assemblies 

# RNAspades transcriptome
#metazoa dataset (C:99%)
docker run -u $(id -u) -v $(pwd):/busco_wd ezlabgva/busco:v5.3.2_cv1 busco -i ./transcripts.fasta -o ./whelk_spades_busco_output_05032022 -m transcriptome  -l metazoa_odb10 --cpu 60

#mollusca dataset (C:90.5%)
docker run -u $(id -u) -v $(pwd):/busco_wd ezlabgva/busco:v5.3.2_cv1 busco -i ./transcripts.fasta -o ./whelk_spades_busco_output_05032022_mullusca -m transcriptome  -l mollusca  --cpu 250


# Trinity transcriptome 
#metazoa dataset (C:98.4%)
docker run -u $(id -u) -v $(pwd):/busco_wd ezlabgva/busco:v5.3.2_cv1 busco -i ./trinity_assembly_1.Trinity.fasta -o ./whelk_trinity_busco_output_05042022_metazoa -m transcriptome  -l metazoa_odb10 --cpu 250

#mollusca dataset (C:88.2%)
docker run -u $(id -u) -v $(pwd):/busco_wd ezlabgva/busco:v5.3.2_cv1 busco -i ./trinity_assembly_1.Trinity.fasta -o ./whelk_trinity_busco_output_05042022_mollusca -m transcriptome  -l mollusca --cpu 250

________________________________________________________________________________________________________________________________________
# filtering of RNAspades transcriptome???
# microbial decontamination

# from the spreadsheet - make gene id file
gene_IDs_bacteria = blast_results_bacteria['query id'].values

# not sure - maybe in R
np.savetxt('microbiome_bacteria_transcriptome_geneIDs.txt', gene_IDs, newline = '\n', fmt = '%s')

# seqtk to pull out transcriptome with gene ids - how to do the opposite?
seqtk subseq rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta microbiome_bacteria_transcriptome_geneIDs.txt > microbiome_bacteria_transcriptome.fasta






________________________________________________________________________________________________________________________________________
# Microbiome transcriptome assembly 
# conducted 4 different microbiome assemblies: viruses, fungi, archaea, and bacteria

# using BLAST from bioconda 

Conda create -n blast
Conda activate blast
conda install -c bioconda blast

### making a protein database from swissprot uniprot for each microbiome transcriptome assembly to blast against
# archaea database
makeblastdb -in archaea_uniprot-reviewed_yes+taxonomy_2157.fasta -title pdbaa_archaea -dbtype prot -out pdbaa_archaea -parse_seqids

#bacteria
makeblastdb -in bacteria_uniprot-reviewed_yes+taxonomy_2.fasta -title pdbaa_bacteria -dbtype prot -out pdbaa_bacteria -parse_seqids

#fungi
makeblastdb -in fungi_uniprot-reviewed_yes+taxonomy_4751.fasta -title pdbaa_fungi -dbtype prot -out pdbaa_fungi -parse_seqids

#viruses
makeblastdb -in viruses_uniprot-reviewed_yes+taxonomy_10239.fasta -title pdbaa_viruses -dbtype prot -out pdbaa_viruses -parse_seqids


### blasting filtered RNAspades transcriptome to each database
# parameters: -outfmt 6 (tabular output option with columns sep by tab) and - evalue 1e-5 (filtered based on evalue, high similarity)

# Virus blast
blastx -query ./rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta -db ./blastdb_reviewed/pdbaa_viruses -out ./viruses_proteins_blastx_1e-5_table.txt -evalue 1e-5 -outfmt 6

# Fungi blast
blastx -query ./rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta -db ./blastdb_reviewed/pdbaa_fungi -out ./fungi_proteins_blastx_1e-5_table.txt -evalue 1e-5 -outfmt 6

# Bacteria blast
blastx -query ./rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta -db ./blastdb_reviewed/pdbaa_bacteria -out ./bacteria_proteins_blastx_1e-5_table.txt -evalue 1e-5 -outfmt 6

# Archaea blast
blastx -query ./rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta -db ./blastdb_reviewed/pdbaa_archaea -out ./archaea_proteins_blastx_1e-5_table.txt -evalue 1e-5 -outfmt 6


### Removing duplicate query ids

# conducted in R:

# remove fungi duplicates
e_value_fungi <- Microbiome_Blast_90_id_Fungi %>%
  group_by(`query id`) %>%
  slice_min(n = 1, `e-value`)

percent_identity_fungi <- e_value_fungi %>%
  group_by(`query id`) %>%
  slice_max(n = 1, `% identity`)

bit_score_fungi <- percent_identity_fungi %>%
  group_by(`query id`) %>%
  slice_max(n = 1, `bitscore`)

no_duplicates_fungi <- bit_score_fungi %>%
  distinct(`query id`, .keep_all = TRUE)

# remove bacteria duplicates
e_value_bacteria <- Microbiome_Blast_90_id_Bacteria %>%
  group_by(`query id`) %>%
  slice_min(n = 1, `e-value`)

percent_identity_bacteria <- e_value_bacteria %>%
  group_by(`query id`) %>%
  slice_max(n = 1, `% identity`)

bit_score_bacteria <- percent_identity_bacteria %>%
  group_by(`query id`) %>%
  slice_max(n = 1, `bitscore`)

no_duplicates_bacteria <- bit_score_bacteria %>%
  distinct(`query id`, .keep_all = TRUE)

# remove viruses duplicates
e_value_viruses <- Microbiome_Blast_90_id_Viruses %>%
  group_by(`query id`) %>%
  slice_min(n = 1, `e-value`)

percent_identity_viruses <- e_value_viruses %>%
  group_by(`query id`) %>%
  slice_max(n = 1, `% identity`)

bit_score_viruses <- percent_identity_viruses %>%
  group_by(`query id`) %>%
  slice_max(n = 1, `bitscore`)

no_duplicates_viruses <- bit_score_viruses %>%
  distinct(`query id`, .keep_all = TRUE)
  
# remove archaea duplicates
e_value_archaea <- Microbiome_Blast_90_id_Archaea %>%
  group_by(`query id`) %>%
  slice_min(n = 1, `e-value`)

percent_identity_archaea <- e_value_archaea %>%
  group_by(`query id`) %>%
  slice_max(n = 1, `% identity`)

bit_score_archaea <- percent_identity_archaea %>%
  group_by(`query id`) %>%
  slice_max(n = 1, `bitscore`)

no_duplicates_archaea <- bit_score_archaea %>%
  distinct(`query id`, .keep_all = TRUE)


### getting gene ids from blast CSVs
!pip install pandas

import numpy as np
import pandas as pd

blast_results_bacteria = pd.read_csv('/large/whelk/Microbiome Blast No Duplicates - Bacteria.csv')

blast_results_archaea = pd.read_csv('/large/whelk/Microbiome Blast No Duplicates - Archaea.csv')

blast_results_fungi = pd.read_csv('/large/whelk/Microbiome Blast No Duplicates - Fungi.csv')

blast_results_viruses = pd.read_csv('/large/whelk/Microbiome Blast No Duplicates - Viruses.csv')


# save each as text file (saving all gen ids from microbial transcriptomes as txt file)
np.savetxt('microbiome_bacteria_transcriptome_geneIDs.txt', gene_IDs_bacteria, newline = '\n', fmt = '%s')

np.savetxt('microbiome_archaea_transcriptome_geneIDs.txt', gene_IDs_archaea, newline = '\n', fmt = '%s')

np.savetxt('microbiome_fungi_transcriptome_geneIDs.txt', gene_IDs_fungi, newline = '\n', fmt = '%s')

np.savetxt('microbiome_viruses_transcriptome_geneIDs.txt', gene_IDs_viruses, newline = '\n', fmt = '%s')


# seqtk to pull out gene ids from each microbiome blast - creates microbiome transcriptome for each microbial group
# bioconda seqtk V1.3
conda create -n seqtk
conda activate seqtk
conda install -c bioconda seqtk

# create transcriptome for each microbe group
seqtk subseq rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta microbiome_bacteria_transcriptome_geneIDs.txt > microbiome_bacteria_transcriptome.fasta

seqtk subseq rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta microbiome_archaea_transcriptome_geneIDs.txt > microbiome_archaea_transcriptome.fasta

seqtk subseq rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta microbiome_fungi_transcriptome_geneIDs.txt > microbiome_fungi_transcriptome.fasta

seqtk subseq rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta microbiome_viruses_transcriptome_geneIDs.txt > microbiome_viruses_transcriptome.fasta

________________________________________________________________________________________________________________________________________
# Gene count matrices for each sample based on microbial transcriptomes
# bioconda kallisto 0.48.0
conda create -n kallisto
conda activate kallisto
conda install -c bioconda kallisto

# Kallisto indexing
kallisto index -i transcripts_bacteria.idx microbiome_bacteria_transcriptome.fasta 

kallisto index -i transcripts_archaea.idx microbiome_archaea_transcriptome.fasta 

kallisto index -i transcripts_fungi.idx microbiome_fungi_transcriptome.fasta 

kallisto index -i transcripts_viruses.idx microbiome_viruses_transcriptome.fasta

### file processing for meta paired end file names
# Pulling out file names with *_paired.fg.gz in name into one file
ls | grep _paired.fq.gz > out1.txt

# line separated names into space seperated
tr '\n' ' ' < out1.txt > out2.txt

# Kallisto quantification for each microbiome transcriptome
# completed for each group (bacteria, archaea, fungi, viruses)
for sample in `cat ./sample_list.txt`
do
   kallisto quant -i /large/whelk/microbiome/transcripts_bacteria.idx -o /large/whelk/microbiome/microbiome_bacteria_kallisto_quant/${sample}_out/ -t 60 /large/whelk/transcriptome/kw_fastq_all_trimmed/${sample}_1_paired.fq.gz /large/whelk/transcriptome/kw_fastq_all_trimmed/${sample}_2_paired.fq.gz 
done

### Anisto - combining the abundance tsv files for each sample into one abundance file for each microbiome 
# conducted for each microbial group
python3 Anisto.py -i root/large/whelk/microbiome/microbiome_bacteria_kallisto_quant -o root/large/whelk/microbiome/microbiome_bacteria_kallisto_quant -p merged;
Options  /Mode=Multiple /ErrorOnStdErr=False /ErrorOnMissingOutput=False /RunOnDocker=True /ImageName="omicdocker/pandas:latest" /OutputFolder="/Users/joseph/RnaSeqTutorial2013/KallistoPythonPipeline/Test04202020";
End;

Begin RunEScript /RunOnServer=True;
SearchFiles "root/large/whelk/microbiome/microbiome_bacteria_kallisto_quant" /Pattern=*.tsv /Recursive=False;
EScriptName KallistoMergePython;
Command python3 Anisto.py -i "%FileDirectory%" -o "%FileDirectory%" -p "merged";
Options  /Mode=Multiple /ErrorOnStdErr=False /ErrorOnMissingOutput=False /RunOnDocker=True /ImageName="omicdocker/pandas:latest" /OutputFolder="/Users/joseph/RnaSeqTutorial2013/KallistoPythonPipeline/Test04202020";
End;


### DESEQ in R

## Archaea

# GENE COUNTS MATRIX
gene_counts_matrix_archaea <- read_tsv(here::here("Abundance Files", "txi.kallisto.archaea.abundance.tsv"))

# Remove gene ID column
gene_counts_archaea <- gene_counts_matrix_archaea[-1]

# Cast all values as integers and return dataframe
gene_counts_archaea <- lapply(gene_counts_archaea, as.integer) 
gene_counts_archaea <- as.data.frame(gene_counts_archaea)

# add GeneIDs as index
row.names(gene_counts_archaea) <- gene_counts_matrix_archaea$geneIDs


# drop Tank 2 columns
gene_counts_archaea <- subset(gene_counts_archaea, select = -c(T2E1_out, T2E15_out, T2E17_out,
                                                                T2E2_out, T2E3_out, T2E4_out,
                                                                 T2E5_out, T2E6_out, T2E7_out,
                                                                 T2E9_out))

# Read in MetaData
MetaData <- read_csv(here::here("Abundance Files", "MetaDataFiles", "MetaData.csv"))


dds <- DESeqDataSetFromMatrix(countData = gene_counts_archaea, 
                              colData = MetaData, 
                              design = ~Condition)

dds <- DESeq(dds)


res <- results(dds)
head(results(dds, tidy=TRUE))

table(res$padj<.05)
summary(res)
res <- res[order(res$padj),]
head(res)

par(mfrow=c(2,3))

plotCounts(dds, gene="NODE_1074596_length_287_cov_1.439252_g833863", intgroup="Condition")
plotCounts(dds, gene="NODE_370663_length_976_cov_31552.052049_g3082", intgroup="Condition")
plotCounts(dds, gene="NODE_891261_length_356_cov_4.197880_g650542", intgroup="Condition")
plotCounts(dds, gene="NODE_342249_length_1058_cov_529.469036_g9688", intgroup="Condition")
plotCounts(dds, gene="NODE_240804_length_1469_cov_2790.174785_g83854", intgroup="Condition")
plotCounts(dds, gene="NODE_40009_length_4467_cov_288.691853_g9688", intgroup="Condition")

# VOLCANO PLOT

#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))

# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))


# PCA

nsub <- sum(rowMeans(counts(dds, normalized=TRUE)) > 5 )

vsdata <- vst(dds, blind=FALSE, nsub)

plotPCA(vsdata, intgroup="Condition")


## Bacteria

# GENE COUNTS MATRIX
gene_counts_matrix_bacteria <- read_tsv(here::here("Abundance Files", "Bacteria", "txi.kallisto.bacteria.abundance.tsv"))

# Remove gene ID column
gene_counts_bacteria <- gene_counts_matrix_bacteria[-1]

# Cast all values as integers and return dataframe
gene_counts_bacteria <- lapply(gene_counts_bacteria, as.integer) 
gene_counts_bacteria <- as.data.frame(gene_counts_bacteria)

# add GeneIDs as index
row.names(gene_counts_bacteria) <- gene_counts_matrix_bacteria$geneIDs

#rounded_gene_counts_matrix <- read_csv(here::here("Abundance Files", "txi.kallisto.bacteria.abundance.rounded.csv"))

# drop Tank 2 columns
gene_counts_bacteria <- subset(gene_counts_bacteria, select = -c(T2E1_out, T2E15_out, T2E17_out,
                                                                T2E2_out, T2E3_out, T2E4_out,
                                                                 T2E5_out, T2E6_out, T2E7_out,
                                                                 T2E9_out))

# Read in MetaData
MetaData <- read_csv(here::here("Abundance Files", "MetaDataFiles", "MetaData.csv"))

dds <- DESeqDataSetFromMatrix(countData = gene_counts_bacteria, 
                              colData = MetaData, 
                              design = ~Condition)

dds <- DESeq(dds)

res <- results(dds)
head(results(dds, tidy=TRUE))

table(res$padj<.05)
summary(res)
res <- res[order(res$padj),]
head(res)

# plotCounts

par(mfrow=c(2,3))

plotCounts(dds, gene="NODE_1027889_length_301_cov_1.956140_g787157", intgroup="Condition")
plotCounts(dds, gene="NODE_1203929_length_258_cov_1.664865_g963193", intgroup="Condition")
plotCounts(dds, gene="NODE_1000218_length_311_cov_1.718487_g759488", intgroup="Condition")
plotCounts(dds, gene="NODE_1000335_length_311_cov_1.609244_g759605", intgroup="Condition")
plotCounts(dds, gene="NODE_1000605_length_311_cov_1.294118_g759875", intgroup="Condition")
plotCounts(dds, gene="NODE_1000725_length_311_cov_1.243697_g759995", intgroup="Condition")

# VOLCANO PLOT

#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))

# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))

# PCA

nsub <- sum(rowMeans(counts(dds, normalized=TRUE)) > 5 )

vsdata <- vst(dds, blind=FALSE, nsub)

plotPCA(vsdata, intgroup="Condition")


## Fungi

# GENE COUNTS MATRIX
gene_counts_matrix_fungi <- read_tsv(here::here("Abundance Files", "txi.kallisto.fungi.abundance.tsv"))

# Remove gene ID column
gene_counts_fungi <- gene_counts_matrix_fungi[-1]

# Cast all values as integers and return dataframe
gene_counts_fungi <- lapply(gene_counts_fungi, as.integer) 
gene_counts_fungi <- as.data.frame(gene_counts_fungi)

# add GeneIDs as index
row.names(gene_counts_fungi) <- gene_counts_matrix_fungi$geneIDs

# drop Tank 2 columns
gene_counts_fungi <- subset(gene_counts_fungi, select = -c(T2E1_out, T2E15_out, T2E17_out,
                                                                T2E2_out, T2E3_out, T2E4_out,
                                                                 T2E5_out, T2E6_out, T2E7_out,
                                                                 T2E9_out))

# Read in MetaData
MetaData <- read_csv(here::here("Abundance Files", "MetaDataFiles", "MetaData.csv"))

dds <- DESeqDataSetFromMatrix(countData = gene_counts_fungi, 
                              colData = MetaData, 
                              design = ~Condition)

dds <- DESeq(dds)

res <- results(dds)
head(results(dds, tidy=TRUE))

summary(res)
res <- res[order(res$padj),]
head(res)

par(mfrow=c(2,3))

gene1 <- plotCounts(dds, gene="NODE_389560_length_927_cov_71720.448478_g179335", intgroup="Condition", returnData=TRUE)
plotCounts(dds, gene="NODE_154477_length_2084_cov_9933.467926_g36785", intgroup="Condition", returnData=TRUE)
plotCounts(dds, gene="NODE_155961_length_2070_cov_16508.652979_g31861", intgroup="Condition", returnData=TRUE)
plotCounts(dds, gene="NODE_204142_length_1684_cov_45313.410925_g22902", intgroup="Condition", returnData=TRUE)
plotCounts(dds, gene="NODE_316944_length_1141_cov_111950.109551_g128414", intgroup="Condition", returnData=TRUE)
plotCounts(dds, gene="NODE_334253_length_1083_cov_2787.794059_g139871", intgroup="Condition", returnData=TRUE)

#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))

# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))

# PCA

nsub <- sum(rowMeans(counts(dds, normalized=TRUE)) > 5 )

vsdata <- vst(dds, blind=FALSE, nsub)

plotPCA(vsdata, intgroup="Condition")


## Viruses

# GENE COUNTS MATRIX
gene_counts_matrix_viruses <- read_tsv(here::here("Abundance Files", "txi.kallisto.viruses.abundance.tsv"))

# Remove gene ID column
gene_counts_viruses <- gene_counts_matrix_viruses[-1]

# Cast all values as integers and return dataframe
gene_counts_viruses <- lapply(gene_counts_viruses, as.integer) 
gene_counts_viruses <- as.data.frame(gene_counts_viruses)

# add GeneIDs as index
row.names(gene_counts_viruses) <- gene_counts_matrix_viruses$geneIDs


# drop Tank 2 columns
gene_counts_viruses <- subset(gene_counts_viruses, select = -c(T2E1_out, T2E15_out, T2E17_out,
                                                                T2E2_out, T2E3_out, T2E4_out,
                                                                 T2E5_out, T2E6_out, T2E7_out,
                                                                 T2E9_out))

# Read in MetaData
MetaData <- read_csv(here::here("Abundance Files", "MetaDataFiles", "MetaData.csv"))

dds <- DESeqDataSetFromMatrix(countData = gene_counts_viruses, 
                              colData = MetaData, 
                              design = ~Condition)

dds <- DESeq(dds)

res <- results(dds)
head(results(dds, tidy=TRUE))

# Sort summary list by p-value

table(res$padj<.05)
summary(res)
res <- res[order(res$padj),]
head(res)

# plotCounts

par(mfrow=c(2,3))

plotCounts(dds, gene="NODE_803213_length_403_cov_2288.990909_g562534", intgroup="Condition")
plotCounts(dds, gene="NODE_417805_length_861_cov_163629.154822_g201360", intgroup="Condition")
plotCounts(dds, gene="NODE_342151_length_1058_cov_164101.663959_g145291", intgroup="Condition")
plotCounts(dds, gene="NODE_145708_length_2174_cov_66676.224655_g41788", intgroup="Condition")
plotCounts(dds, gene="NODE_176334_length_1892_cov_26850.245190_g53825", intgroup="Condition")
plotCounts(dds, gene="NODE_182103_length_1845_cov_5778.250564_g38243", intgroup="Condition")

# VOLCANO PLOT

#reset par
par(mfrow=c(1,1))
# Make a basic volcano plot
with(res, plot(log2FoldChange, -log10(pvalue), pch=20, main="Volcano plot", xlim=c(-3,3)))

# Add colored points: blue if padj<0.01, red if log2FC>1 and padj<0.05)
with(subset(res, padj<.01 ), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(res, padj<.01 & abs(log2FoldChange)>2), points(log2FoldChange, -log10(pvalue), pch=20, col="red"))

# PCA

nsub <- sum(rowMeans(counts(dds, normalized=TRUE)) > 5 )

vsdata <- vst(dds, blind=FALSE, nsub)

plotPCA(vsdata, intgroup="Condition")


________________________________________________________________________________________________________________________________________


# genera gene count analysis

IN R:

# file sorting for gen ids

setwd("~/Desktop/filtered_blast")
gb = read.csv("nodub_combo.csv", header=TRUE) 
head(gb)

geneids = gb$V1
geneids

# write as a text file just gene ids
write(geneids, "genera_geneids.txt")


ON SERVER:

# file with gene ids of interest
conda activate seqtk

seqtk subseq rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta genera_geneids.txt > microbiome_coregenera_transcriptome.fasta


# kallisto gene ocunts

conda activate kallisto

kallisto index -i transcripts_genera.idx microbiome_coregenera_transcriptome.fasta 

# gene counts 

for sample in `cat ./sample_list.txt`
do
  kallisto quant -i /large/whelk/microbiome/transcripts_genera.idx -o /large/whelk/microbiome/microbiome_coregenera_kallisto_quant/${sample}_out/ -t 60 /large/whelk/transcriptome/kw_fastq_all_trimmed/${sample}_1_paired.fq.gz /large/whelk/transcriptome/kw_fastq_all_trimmed/${sample}_2_paired.fq.gz
done
 

________________________________________________________________________________________________________________________________________






