# de novo transcriptome assembly commands

# DATA
#42 kellet's whelk egg capsules had full transcriptome sequencing 

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Raw sequence trimmming 
#Trimming was conducted on all samples except for duplicates (“ ”_2) using Trimmomatic 0.39 IlluminaClip with parameters: leading:3 trailing:3 (removal of first and last three base pairs), slidingwindow: 4:15 (scans the read with a 4-base wide sliding window, cutting when the average quality per base drops below 15), minlen:36 (drop reads with less than 36 base pair length)
# command for trimming using trimmomatic

ILLUMINACLIP:/usr/local/Trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36 :::: sample_list.txt > trimmomatic.out 2>trimmomatic.err

# see full data processing at https://github.com/calpoly-bioinf/whelk_processing_analysis

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# RNAspades transcriptome assembly
# using bioconda to upload SPAdes genome assembler v3.15.4

conda create -n spades
conda activate spades
conda install -c bioconda spades
spades.py

#command for transcriptome assembly
spades.py --rna -1 ./kw_fastq_all_trimmed/combined_1_paired.fq.gz -2 ./kw_fastq_all_trimmed/combined_2_paired.fq.gz -t 64 -m 750 -o rnaspades_04302022


_____________________________________________________________________________________________________________________________________________________________________________________________
### splitting gene ids between microorganism and eukaryota transcriptomes

Conda create -n blast
Conda activate blast
conda install -c bioconda blast

# archaea database
makeblastdb -in archaea_uniprot-reviewed_yes+taxonomy_2157.fasta -title pdbaa_archaea -dbtype prot -out pdbaa_archaea -parse_seqids
# bacteria
makeblastdb -in bacteria_uniprot-reviewed_yes+taxonomy_2.fasta -title pdbaa_bacteria -dbtype prot -out pdbaa_bacteria -parse_seqids
# fungi
makeblastdb -in fungi_uniprot-reviewed_yes+taxonomy_4751.fasta -title pdbaa_fungi -dbtype prot -out pdbaa_fungi -parse_seqids
# viruses
makeblastdb -in viruses_uniprot-reviewed_yes+taxonomy_10239.fasta -title pdbaa_viruses -dbtype prot -out pdbaa_viruses -parse_seqids
# eukaryota
makeblastdb -in eukaryota_uniprot_reviewed.fasta -title pdbaa_eukaryota -dbtype prot -out pdbaa_eukaryota -parse_seqids

# virus blast
blastx -query ./rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta -db ./blastdb_reviewed/pdbaa_viruses -out ./viruses_proteins_blastx_1e-5_table.txt -evalue 1e-5 -outfmt 6

# bacteria blast
blastx -query ./rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta -db ./blastdb_reviewed/pdbaa_bacteria -out ./bacteria_proteins_blastx_1e-5_table.txt -evalue 1e-5 -outfmt 6

# archaea blast
blastx -query ./rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta -db ./blastdb_reviewed/pdbaa_archaea -out ./archaea_proteins_blastx_1e-5_table.txt -evalue 1e-5 -outfmt 6

# eukaryota blast
blastx -query ./rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta -db ./blastdb_reviewed/pdbaa_eukaryota -out ./eukaryota_proteins_blastx_1e-5_table.txt -evalue 1e-5 -outfmt 6 -num_threads 64


# in R, add column signifying origin - either microbiome or eukaryota

setwd("~/Desktop/transcirptome_filter")
v <- read.delim("viruses_proteins_blastx_1e-5_table.txt", header=FALSE)
b <- read.delim("bacteria_proteins_blastx_1e-5_table.txt", header=FALSE)
a <- read.delim("archaea_proteins_blastx_1e-5_table.txt", header=FALSE)
e <- read.delim("eukaryota_proteins_blastx_1e-5_table.txt", header=FALSE)

# adding column signifying origin 
v$origin = viruses
b$origin = bacteria
a$origin = archaea
e$origin = eukaryota

# adding column signifying group 
v$group = microorganism
b$group = microorganism
a$group = microorganism
e$group = host

# combining all blasts into one dataframe 
combo = rbind(v,b,a,e)

# put in order of % id and then bitscore
sorted_combo = combo[order(-combo$V3),]
head(sorted_combo)
sorted_combo = combo[order(-combo$V12),]
head(sorted_combo)

# removed dupicate ids
nodub_combo = sorted_combo[!duplicated(sorted_combo$V1), ]

# seperate into groups: microorganism and eukaryota
micro = subset(nodub_combo, group == 'microorganism')
host = subset(nodub_combo, group == 'host')

# files for blast results on each group
write.csv(micro, "~/Desktop/microbiome_blast.csv")
write.csv(host, "~/Desktop/eukaryota_blast.csv")

# get gene ids from each group
micro_geneids = micro$V1
host_geneids = host$V1

write(micro_geneids, "micro_geneids.txt")
write(host_geneids, "host_geneids.txt")

# create host_transcriptome based on removal of micro_geneids
# get all geneids from the transcriptome on server
grep "^>" ./rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta | cut -d'|' -f3 | cut -d ' ' -f1 > ./geneids.txt

# put into R

# subtract micro_geneids from transcriptome gene ids
geneids = read.table("geneids.txt", header=FALSE)

# remove ">"
geneids$V1<-gsub(">","",as.character(geneids$V1))

# ids to remove
df2 = data.frame(micro_geneids)

# convert to transcriptome gene ids to dataframe
df = data.frame(geneids)

# removing micro gene ids from transcriptome gene ids
# df$V1 = transcriptome geneids, df2$V1 = gene ids to remove
df$V1 %in% df2$V1

# 1448 contaminated gene ids removed
sorted_df = df$V1 [! df$V1 %in% df2$V1]

# write as a text file
write(sorted_df, "whelk_geneids.txt")

# ON SERVER:

# file with gene ids of interest
conda activate seqtk

# creating microbiome transcriptome
# do in microbiome directory
seqtk subseq rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta micro_geneids.txt > microbiome_transcriptome.fasta
#do in filtered transcriptome directory
seqtk subseq rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta host_geneids.txt > host_transcriptome.fasta
seqtk subseq rnaspades_assembly_calpoly_annotated_swissprot_nr.fasta whelk_geneids.txt > whelk_transcriptome.fasta

# kallisto gene ocunts
conda activate kallisto
# do in microbiome directory
kallisto index -i transcripts_microbiome.idx microbiome_transcriptome.fasta 
#do in filtered transcriptome directory
kallisto index -i transcripts_whelk.idx whelk_transcriptome.fasta 

# gene counts (make folder ***_kallisto_quant before running)
for sample in `cat ./sample_list.txt`
do
  kallisto quant -i /large/whelk/microbiome/transcripts_microbiome.idx -o /large/whelk/microbiome/microbiome_kallisto_quant/${sample}_out/ -t 60 /large/whelk/transcriptome/kw_fastq_all_trimmed/${sample}_1_paired.fq.gz /large/whelk/transcriptome/kw_fastq_all_trimmed/${sample}_2_paired.fq.gz
done

for sample in `cat ./sample_list.txt`
do
  kallisto quant -i /large/whelk/transcriptome/filtered_spadestranscriptome/transcripts_whelk.idx -o /large/whelk/transcriptome/filtered_spadestranscriptome/whelk_transcriptome_kallisto_quant/${sample}_out/ -t 60 /large/whelk/transcriptome/kw_fastq_all_trimmed/${sample}_1_paired.fq.gz /large/whelk/transcriptome/kw_fastq_all_trimmed/${sample}_2_paired.fq.gz
done

# check host_transcriptome busco
#mollusca
busco -i ./whelk_transcriptome.fasta -o ./whelk_transcriptome_busco_04114023_mollusca -m transcriptome  -l mollusca --cpu 250
#metazoa
busco -i ./whelk_transcriptome.fasta -o ./whelk_transcriptome_busco_04112023_metazoa -m transcriptome  -l metazoa_odb10 --cpu 250

_____________________________________________________________________________________________________________________________________________________________________________________________
# Deseq2

# after kallisto steps

### combining tsv files in R
BiocManager::install("tximportData")

BiocManager::install("rhdf5")

BiocManager::install("tximport")

library(tximportData)
library(readr)
library(stringr)
library(tximport)
library(rhdf5)

# microbiome
setwd("/large/whelk/microbiome/")
dir = system.file("extdata", package = "tximportData")
dir
list.files(dir)

files = file.path("/large/whelk/microbiome/microbiome_kallisto_quant", samples$names, "abundance.tsv")
#files_h = file.path("/large/whelk/microbiome/transcriptome_kallisto_quant", samples$names, "abundance.tsv")

con = file("microbiome_transcriptome.fasta")
data = readLines(con = con)
close(con)

fa = data[grepl(">",data)]

fa = str_replace(fa, ">", "")
fa

tx2gene = data.frame('TXNAME' = fa, 'GENEID' = fa)
tx2gene

# remove isoforms
#tx2gene$GENEID = gsub("\\_i.*", "", tx2gene$GENEID)
#tx2gene

files
names(files) = samples$names

txi.kallisto.microbiome.tsv = tximport(files, type = 'kallisto', tx2gene = tx2gene, ignoreAfterBar = TRUE)
head(txi.kallisto.microbiome.tsv)
names(txi.kallisto.microbiome.tsv)
dim(txi.kallisto.microbiome.tsv)

abundance = as.data.frame(txi.kallisto.microbiome.tsv$abundance)
df = data.frame("geneIDs" = rownames(abundance))

df2 = cbind(df, data.frame(abundance, row.names=NULL))
df2

write.table(df2, file = "txi.kallisto.microbiome.abundance.tsv", sep = "\t", row.names = FALSE)  

### deseq for entire microbiome - any differentially expressed genes we can look back to the blast results to find origin
# in theory we should have ~7 degs? (no fungi degs - only viruses)


# GENE COUNTS MATRIX
gene_counts_matrix_micro <- read_tsv(here::here("Abundance Files", "txi.kallisto.microbiome.abundance.tsv"))

# Remove gene ID column
gene_counts_micro <- gene_counts_matrix_micro[-1]

# Cast all values as integers and return dataframe
gene_counts_micro <- lapply(gene_counts_micro, as.integer) 
gene_counts_micro <- as.data.frame(gene_counts_micro)

# add GeneIDs as index
row.names(gene_counts_micro) <- gene_counts_matrix_micro$geneIDs

# drop Tank 2 columns (these are the crossed tanks)
gene_counts_micro <- subset(gene_counts_micro, select = -c(T2E1_out, T2E15_out, T2E17_out,
                                                               T2E2_out, T2E3_out, T2E4_out,
                                                               T2E5_out, T2E6_out, T2E7_out,
                                                               T2E9_out))

# Read in MetaData
install.packages("DESeq2")
library("DESeq2")
library(ggplot2)

MetaData <- read_csv(here::here("Abundance Files", "MetaDataFiles", "MetaData.csv"))


dds <- DESeqDataSetFromMatrix(countData = gene_counts_micro, 
                              colData = MetaData, 
                              design = ~Condition)

dds <- DESeq(dds)

res <- results(dds)
head(results(dds, tidy=TRUE))

# filter for "significant" degs
table(res$padj<.05)
summary(res)
res <- res[order(res$padj),]
head(res)

# PCA
nsub <- sum(rowMeans(counts(dds, normalized=TRUE)) > 5 )

vsdata <- vst(dds, blind=FALSE, nsub)

plotPCA(vsdata, intgroup="Condition")


# see methods for pca on transcriptome

library("DESeq2")
library(ggplot2)


num_sig = sum(DE_genes$padj < 0.05) ##1996
num_sig

top = DE_genes[1:num_sig,]
top
top_names = row.names(top)

genes = gene.counts[top_names, ]


#check to make sure the sample names are in same order as gene count table
all(rownames(samples) %in% colnames(gene.counts))
all(rownames(samples) == colnames(gene.counts))

samples
#DEseq on Monterey and naples
ddsFullCountTable <- DESeqDataSetFromMatrix(
  countData = genes, ##gene.counts,
  colData = samples,
  design = ~ as.factor(dex)) ##check design

dds = DESeq(ddsFullCountTable)

num_norm = sum( rowMeans( counts(dds, normalized=TRUE)) > 5 ) #950
num_norm

test = vst(ddsFullCountTable, blind=FALSE, nsub=num_norm) ## nsub was the issue, see the above link
plotPCA(test, intgroup="dex")


_____________________________________________________________________________________________________________________________________________________________________________________________

# Other R scripts
#great bray curtis/pca/nmds plotting:

setwd("~/Desktop")
kallisto <-read.table("step3_kallisto.isoform.TMM.EXPR.matrix.Monterey_vs_Naples.DESeq2", header = TRUE)
swissprot_blast_rnaspades_table <- read.delim("~/Desktop/swissprot_blast_rnaspades_table.txt", header=FALSE)

install.packages("ggplot2")

install.packages("vegan")

library(ggplot2)

library(vegan)

library(cluster)

library(tidyr)

setwd("~/Desktop")
mb <-read.csv("species_count_microbiomeT.csv", header = TRUE)
summary(mb)
head(mb)



#Statistical testing

## calculate the diversity for individual samples
mb$Sdiv <- diversity(mb[2:362], index = "shannon") # diversity function is part of vegan
mb$Sdiv

#compare via boxplots
boxplot(mb$Sdiv ~ mb$location, xlab="Locations", ylab="Shannon Diversity")

#statistical comparison of diversity
d1 <- aov(mb$Sdiv ~ mb$location)
summary(d1)
TukeyHSD(d1)

#do the same but compare north vs south
#add column group to describe north and south
group = c("north", "north", "north", "north", "north", "north", "south", "south", "south", "south", "south", "south")
mb$group = group

#add column group to describe outside vs inside 
prox = c("outside", "outside", "outside", "inside", "inside", "inside", "inside", "inside", "inside", "outside", "outside", "outside")
mb$proximity = prox

#add column group to describe mon-nap and dic-pol 
rand = c("upper", "upper", "upper", "lower", "lower", "lower", "upper", "upper", "upper", "lower", "lower", "lower")
mb$random = rand


boxplot(mb$Sdiv ~ mb$group, xlab="North vs South", ylab="Shannon Diversity")

boxplot(mb$Sdiv ~ mb$proximity, xlab="outside vs inside", ylab="Shannon Diversity")


d1 <- aov(mb$Sdiv ~ mb$group)
summary(d1)
TukeyHSD(d1)

d2 <- aov(mb$Sdiv ~ mb$proximity)
summary(d2)
TukeyHSD(d2)

d3 <- aov(mb$Sdiv ~ mb$random)
summary(d3)
TukeyHSD(d3)


#distance calculation for bray-curtis dissimilarity (need to reload mb)

rownames(mb) <- mb$location
mb = mb[,-1]

mb = as.matrix(mb)
dist = vegdist(mb, method="bray")
dist


# PCA with more customization
pcoa = cmdscale(dist, k=2, eig=TRUE, add=TRUE)
pcoa
positions = pcoa$points
positions
colnames(positions) = c("pcoa1", "pcoa2")

positions
positions = data.frame(positions)
positions1 = positions
locations = c("MON", "MON", "MON", "DIC", "DIC", "DIC", "NAP", "NAP", "NAP", "POL", "POL", "POL")
positions1$locations = locations

positions1

group = c("north", "north", "north", "north", "north", "north", "south", "south", "south", "south", "south", "south")
positions1$group = group

#PCA comparing all 4 locations
positions1 %>%
  as_tibble() %>%
  ggplot(aes(x=pcoa1, y=pcoa2, colour=locations, shape = group)) +
  geom_point(size=) + 
  labs(x="PCo 1 (32.78%)", y="PCo 2 (23.75%)") +
  scale_shape_manual(values=c(16, 17)) +
  scale_colour_manual(values=c("blue", "darkgreen", "red", "darkorange"))


#PCA comparing north vs south
positions1 %>%
  as_tibble() %>%
  ggplot(aes(x=pcoa1, y=pcoa2, colour=locations, )) +
  geom_point() +
  labs(x="PCo 1 (32.78%)", y="PCo 2 (23.75%)") +
  scale_colour_manual(values=c("blue", "blue", "red", "red"))


#sample correlation heatmap

ggplot(mb, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile() +
  geom_text(aes(Var2, Var1, label = value), size = 5)


####other methods

rownames(mb) <- mb$location
mb = mb[,-1]

mb = as.matrix(mb)

#distance calculation for bray-curtis dissimilarity
dist = vegdist(mb, method="bray")
dist


#NMDS method
nmds = metaMDS(dist)
nmds
scores(nmds) %>%
  as_tibble(rownames = "location") %>%
  ggplot(aes(x=NMDS1, y=NMDS2, colour=as.factor(location))) +
  scale_colour_manual(values=c("1" = "red", "2" = "red", "3" = "red", "4" = "blue", "5" = "blue", "6" = "blue", "7" = "green", "8" = "green", "9" = "green", "10" = "purple", "11" = "purple", "12" = "purple")) +
  geom_point()


# other PCA method
install.packages("ape")
library(ape)

#PCA of bray curtis
PCOA <- pcoa(dist)

PCOA

#sum of first vector (.3277652)
sum((as.vector(PCA$CA$eig)/sum(PCA$CA$eig))[1:1])

#sum of second vector (.2375306)
sum((as.vector(PCA$CA$eig)/sum(PCA$CA$eig))[2:2])

#sum of first and second vector (.5604003)
sum((as.vector(PCA$CA$eig)/sum(PCA$CA$eig))[1:2])

#barplot showing the variance described by each axis (over 50% of variance described by first two)
barplot(PCOA$values$Relative_eig[1:10])

biplot.pcoa(PCOA, rn="MON", "MON", "MON", "MON")

biplot.pcoa(PCOA, mb)


#PCA comparing all 4 locations
positions1 %>%
  as_tibble() %>%
  ggplot(aes(x=pcoa1, y=pcoa2, colour=locations)) +
  geom_point() +
  labs(x="PCo 1 (32.78%)", y="PCo 2 (23.75%)") +
  scale_colour_manual(values=c("blue", "darkgreen", "red", "darkorange"))

#PCA comparing north vs south
positions1 %>%
  as_tibble() %>%
  ggplot(aes(x=pcoa1, y=pcoa2, colour=locations)) +
  geom_point() +
  labs(x="PCo 1 (32.78%)", y="PCo 2 (23.75%)") +
  scale_colour_manual(values=c("blue", "blue", "red", "red"))

#Statistical testing

## calculate the diversity for individual samples
mb$Sdiv <- diversity(mb[2:362], index = "shannon") # diversity function is part of vegan
mb$Sdiv

#compare via boxplots
boxplot(mb$Sdiv ~ mb$location, xlab="Locations", ylab="Shannon Diversity")

#statistical comparison of diversity
d1 <- aov(mb$Sdiv ~ mb$location)
summary(d1)
TukeyHSD(d1)
